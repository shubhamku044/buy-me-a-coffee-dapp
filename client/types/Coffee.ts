/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Coffee {
  export type MemoStruct = {
    name: string;
    message: string;
    timestamp: BigNumberish;
    from: AddressLike;
  };

  export type MemoStructOutput = [
    name: string,
    message: string,
    timestamp: bigint,
    from: string
  ] & { name: string; message: string; timestamp: bigint; from: string };
}

export interface CoffeeInterface extends Interface {
  getFunction(nameOrSignature: "buyMeACoffee" | "getMemos"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buyMeACoffee",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "getMemos", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "buyMeACoffee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMemos", data: BytesLike): Result;
}

export interface Coffee extends BaseContract {
  connect(runner?: ContractRunner | null): Coffee;
  waitForDeployment(): Promise<this>;

  interface: CoffeeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  buyMeACoffee: TypedContractMethod<
    [name: string, message: string],
    [void],
    "payable"
  >;

  getMemos: TypedContractMethod<[], [Coffee.MemoStructOutput[]], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buyMeACoffee"
  ): TypedContractMethod<[name: string, message: string], [void], "payable">;
  getFunction(
    nameOrSignature: "getMemos"
  ): TypedContractMethod<[], [Coffee.MemoStructOutput[]], "view">;

  filters: {};
}
